@using TetrisShared.DTOs
@inject IChatService chatService
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IPlayerService playerService
@inject IHttpClientFactory HttpClientFactory
@* @inject IJSRuntime JSRuntime

<script>
    function scrollToBottom(element) {
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    }
</script> *@



<div class="chat-container">
    <div class="chat-messages">
        @if (messages != null)
        {
            foreach (var message in messages)
            {
                <div class="chat-message">
                    <div class="chat-username">@message.PlayerUsername</div>
                    <div class="chat-time">@message.TimeSent</div>
                    <div class="chat-text">@message.Message</div>
                </div>
            }
        }
        else
        {
            <p>No messages yet.</p>
        }
    </div>

    <div class="chat-input">
        <EditForm class="message-form" Model="@this" OnValidSubmit="SendMessage">
            <InputText class="form-control" @bind-Value="newMessageText" placeholder="Type a message..." />
            @if (playerUsername is not null)
            {
                <button type="submit" class="btn btn-primary">Send</button>
            }
        </EditForm>
        @if (playerUsername is null)
        {
            <p class="help-message">You must be logged in to send messages.</p>
        }
    </div>
</div>

@code {
    private HttpClient httpClient;
    List<ChatDto> messages = null;
    string authId;
    int playerId;
    string playerUsername;
    AuthenticationState authState;
    string newMessageText;
    @* private ElementReference chatMessagesDiv; *@


    protected override async Task OnInitializedAsync()
    {
        httpClient = HttpClientFactory.CreateClient("TetrisApi");

        authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        chatService.OnMessage += async () => await LoadMessages();

        if (user.Identity?.IsAuthenticated == true)
        {
            var applicationuser = await UserManager.GetUserAsync(user);
            if (applicationuser != null)
            {
                authId = applicationuser.Id;
            }

            var player = await playerService.GetPlayerByAuthIdAsync(authId);
            if (player is not null)
            {
                playerId = player.Id;
                playerUsername = player.Username;
            }
        }

        await LoadMessages();
    }

    private async Task LoadMessages()
    {
        messages = await httpClient.GetFromJsonAsync<List<ChatDto>>("api/chat");
        messages = messages.OrderBy(m => m.TimeSent).ToList();
        @* await ScrollToBottom(); *@

    }


    private async Task SendMessage()
    {
        ChatDto chatDto = new ChatDto()
            {
                PlayerId = playerId,
                Message = newMessageText
            };

        await httpClient.PostAsJsonAsync("api/chat", chatDto);
        newMessageText = "";
        await LoadMessages();

    }
    @*
    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", chatMessagesDiv);
    } *@

}