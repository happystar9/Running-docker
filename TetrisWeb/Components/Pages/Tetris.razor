@page "/tetris"
@inherits LayoutComponentBase
@using TetrisWeb.Components.Models;
@using TetrisWeb.Components.Pages.Partials;
@using TetrisWeb.ApiServices;
@using TetrisWeb.GameData
@inject IJSRuntime _jsRuntime;
@inject GameSessionService gameSessionService;
@inject IGameService gameService;
@inject AuthenticationStateProvider AuthStateProvider;
@inject UserManager<ApplicationUser> UserManager;
@inject IPlayerService playerService;
@inject IJSRuntime JSRuntime

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js">
</script>
<script>
    window.SetFocusToElement = (element) => {
        element.focus();
    };
    window.preventScroll = (event) => {
        // Prevent spacebar and arrow keys from scrolling
        if (event.key === " " || event.key === "ArrowDown" || event.key === "ArrowUp") {
            event.preventDefault();
        }
    };
</script>

<HeadContent>
    <title>Tetris</title>
</HeadContent>
<div class="main-container">
    <div class="row">
        <div class="col">
            @if (gameSessionService.GameStateGrid.State == GameState.NotStarted)
            {
                <button @onclick="RunGame" class="btn btn-primary">Start!</button>
            }
            @if (gameSessionService.GameStateGrid.State == GameState.GameOver)
            {
                <button @onclick="NewGame" class="btn btn-primary">New Game!</button>
            }
        </div>
    </div>

    <button @onclick=" () => gameSessionService.AddGarbage()">Add Garbage</button>

    <div class="row">
        <div class="col">
            <div class="tetris-container" tabindex="0" @onkeydown="KeyDown" @ref="gameBoardDiv">
                @for (int i = gameSessionService.GameStateGrid.Height; i >= 1; i--)
                {
                    <div class="tetris-row">
                        @for (int j = 1; j <= gameSessionService.GameStateGrid.Width; j++)
                        {
                            <GridCell Row="i" Column="j" Tetromino="gameSessionService.currentTetromino" Grid="gameSessionService.GameStateGrid" />
                        }
                    </div>
                }
            </div>
        </div>
        <div class="col">
            @if (gameSessionService.GameStateGrid.State == GameState.GameOver)
            {
                <h1>Game Over!</h1>
                <p>Thanks for playing!</p>
            }
            @if (gameSessionService.GameStateGrid.IsStarted)
            {
                <div class="row">
                    <div class="col">
                        <h2>Upcoming Pieces</h2>
                    </div>
                </div>
                <TetrominoDisplay Style="gameSessionService.nextStyle" />
                <TetrominoDisplay Style="gameSessionService.secondNextStyle" />
                <TetrominoDisplay Style="gameSessionService.thirdNextStyle" />
                <div class="row">
                    <div class="col">
                        <h3>Controls</h3>
                        <span>&#8592;</span> / <span>&#8594;</span> Move Tetromino<br />
                        <span>&#8593;</span>: Rotate Tetromino<br />
                        <span>&#8595;</span>: Move Down <br />
                        <span>Space</span>: Quick Drop Tetromino<br />
                    </div>
                </div>
            }
        </div>
        @if (selectedGame == null){
            <button>Join Game</button>
        }
        else
        {
            <button @onclick="()=> gameService.JoinGameAsync(selectedGame.Id, playerId)">Join Game</button>
        }
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                @if (selectedGame is not null)
                {
                    @selectedGame?.Id
                }
                else
                {
                    <a>Select Game</a>
                }
            </button>
            <ul class="dropdown-menu">
                @if (games is not null)
                {
                    @foreach (var game in games)
                    {
                        <li class="dropdown-item" @onclick="() => SelectGame(game)">
                            @game.Id
                        </li>
                    }
                }
                else
                {
                    <li class="dropdown-item">No games available</li>
                }
            </ul>
        </div>
        <div class="col">
            <div class="row">
                <div class="col">
                    <h2>Score: @gameSessionService.Score</h2>
                    <span>Previous High Score: @gameSessionService.previousHighScore</span>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <h2>Level: @level</h2>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="chat-container">
                        @if (isInitialized)
                        {
                            <Chat AuthId=authId, CurrentPlayer=playerDto></Chat>

                        }
                        else
                        {
                            <p>Loading...</p>
                        }

                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@code {
    Game selectedGame;
    List<Game> games;
    AuthenticationState authState;
    string authId;
    int playerId;
    PlayerDto playerDto;
    bool isInitialized = false;

    Grid grid => gameSessionService.GameStateGrid;

    TetrominoGenerator generator = new TetrominoGenerator();

    int standardDelay = 1000;

    bool skipDelay = false;

    int level = 1;
    int score = 0;
    int previousHighScore = 0;
    string previousScoreCookieValue = "Nothing";

    protected ElementReference gameBoardDiv;

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var applicationuser = await UserManager.GetUserAsync(user);
            if(applicationuser is not null)
            {
                authId = applicationuser.Id;

            }


            try
            {
                playerDto= await playerService.GetPlayerByAuthIdAsync(authId);
                playerId = playerDto.Id;
            }
            catch
            {
                throw new Exception("Auth id does not have an associated player account.");
            }

            await JSRuntime.InvokeVoidAsync("eval", @"
            document.addEventListener('keydown', window.preventScroll);
        ");

        }


        games = await gameService.GetAllLiveGamesAsync();
        gameSessionService.OnStateChange += StateHasChanged;

        isInitialized = true;
        StateHasChanged();


    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync("SetFocusToElement", gameBoardDiv);
        }
    }

    private void SelectGame(Game game)
    {
        selectedGame = game;
        StateHasChanged();
    }

    public void NewGame()
    {
        gameSessionService.ResetGame();
        level = 1;
        score = 0;
    }

    public async Task RunGame()
    {
        gameSessionService.RunGameSession();
        await _jsRuntime.InvokeVoidAsync("SetFocusToElement", gameBoardDiv);
    }

    public async Task Delay(int millis)
    {
        int totalDelay = 0;
        while (totalDelay < millis && !skipDelay)
        {
            totalDelay += 50;
            await Task.Delay(50);
        }
        skipDelay = false;
    }

    public async Task RunCurrentTetromino()
    {
        gameSessionService.RunCurrentTetromino();
    }

    public async Task ClearCompleteRows()
    {
        gameSessionService.ClearCompleteRows();
        StateHasChanged();
    }

    protected async Task KeyDown(KeyboardEventArgs e)
    {
        if (gameSessionService.GameStateGrid.State == GameState.Playing)
        {
            if (e.Key == "ArrowRight")
            {
                await gameSessionService.MoveRight(1);
            }
            if (e.Key == "ArrowLeft")
            {
                await gameSessionService.MoveLeft(1);
            }
            if (e.Key == " ")
            {
                await gameSessionService.Drop();
                StateHasChanged();
            }
            if (e.Key == "ArrowDown")
            {
                await gameSessionService.MoveDown(1);
            }
            if (e.Key == "ArrowUp")
            {
                await gameSessionService.Rotate();
            }
            StateHasChanged();
        }
    }
    public void Dispose()
    {
        gameSessionService.OnStateChange -= StateHasChanged;
    }

    public async ValueTask DisposeAsync()
    {
        // Clean up the event listener when the component is disposed
        await JSRuntime.InvokeVoidAsync("eval", @"
            document.removeEventListener('keydown', window.preventScroll);
        ");
    }
}

