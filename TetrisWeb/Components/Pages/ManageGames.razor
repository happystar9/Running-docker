@page "/manageGames"
@using TetrisWeb.ApiServices;
@using Microsoft.AspNetCore.Identity;
@using TetrisWeb.AuthData;
@using TetrisWeb.GameData;
@using Microsoft.AspNetCore.Components.Forms
@using TetrisWeb.ApiServices
@inject IGameService gameService;
@inject IPlayerService PlayerService
@inject UserManager<ApplicationUser> UserManager;
@inject AuthenticationStateProvider AuthStateProvider;
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Admin")]

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>

    <button class="btn-primary" @onclick="@CreateGame">CreateGame</button>
    <button class="btn-danger" @onclick="() => EndGame(selectedGame)">
        EndGame
        @if (selectedGame != null)
    {
        <p>@selectedGame</p>
    }
</button>
<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
        @if (selectedGame is not null)
        {
            @selectedGame?.Id
        }
        else
        {
            <a>Select Game</a>
        }
    </button> 
    <ul class="dropdown-menu">
        @if (games is not null)
        {
            @foreach (var game in games)
            {
                <li class="dropdown-item" @onclick="() => SelectGame(game)">@game.Id
                </li>
            }
        }
        else
        {
            <li class="dropdown-item">No games available</li>
        }
    </ul>
</div>




@code {
    Game selectedGame;
    string authId;
    List<Game> games;
    AuthenticationState authState;
    bool isAdmin;

    protected override async void OnInitialized()
    {
        authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var applicationuser = await UserManager.GetUserAsync(user);
            if (applicationuser != null)
            {
                authId = applicationuser.Id;
            }

            isAdmin = user.IsInRole("Admin");
        }
        games = await gameService.GetAllLiveGamesAsync();
        StateHasChanged();

    }

    private void SelectGame(Game game)
    {
        selectedGame = game;
        StateHasChanged();
    }

    public async Task CreateGame()
    {
        games.Add(await gameService.CreateGameAsync(authId));
        StateHasChanged();
    }
    public async Task EndGame(Game game)
    {
        if (selectedGame != null)
        {
            await gameService.EndGameAsync(game.Id);
            games.Remove(game);
            selectedGame = null;
            StateHasChanged();
		}
	}
}
