@page "/manageGames"
@using TetrisWeb.ApiServices;
@using Microsoft.AspNetCore.Identity;
@using TetrisWeb.AuthData;
@using TetrisWeb.GameData;
@inject IGameService gameService;
@inject UserManager<ApplicationUser> UserManager;
@inject AuthenticationStateProvider AuthStateProvider;
@inject UserManager<ApplicationUser> userManager;

@*TODO: Authorize for admins only*@

@if(isAdmin)
{
<button class="btn-primary" @onclick="@CreateGame">CreateGame</button>
<button class="btn-danger">EndGame
	@if (selectedGame != null)
	{
		<p>selectedGame</p>
	}
</button>
<div class="dropdown">
	<button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
		@if (selectedGame != null)
		{
			@selectedGame?.Id
		}
		else
		{
			<a>Select Game</a>
		}
	</button>
	<ul class="dropdown-menu">
		@if (games is not null)
		{
			@foreach (Game game in games)
			{
				<li class="dropdown-item" onclick="() =>@selectedGame = @game">@game.Id"</li>
			}
		}
		else
		{
			<li><a class="dropdown-item">No games available</a></li>
		}
	</ul>
</div>

}


@code {
	Game selectedGame;
	string authId;
	List<Game> games;
	AuthenticationState authState;
	bool isAdmin;



	protected override async void OnInitialized()
	{
		games = await gameService.GetAllLiveGamesAsync();
		authState = await AuthStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity?.IsAuthenticated == true)
		{
			var applicationuser = await UserManager.GetUserAsync(user);
			if (applicationuser != null)
			{
				authId = applicationuser.Id;
			}

			isAdmin = user.IsInRole("Admin");
		}

	}

	public async Task CreateGame()
	{
		games.Add(await gameService.CreateGameAsync(authId));
		StateHasChanged();
	}
	public async Task EndGame(Game game)
	{
		if (selectedGame != null)
		{
			// await gameService.EndGameAsync(game.Id);
			// games.Remove(game);
			// StateHasChanged();
		}
	}
}
