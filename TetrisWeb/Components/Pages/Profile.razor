@page "/Profile"
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject IPlayerService PlayerService
@inject AuthenticationStateProvider AuthStateProvider


@using Microsoft.AspNetCore.Components.Forms
@using TetrisWeb.ApiServices

@attribute [Authorize]

<PageTitle>Player Profile</PageTitle>

<AuthorizeView>
	@if (player is null)
	{
		<div class="profile-container">
			<p>Player not found. Please register to play.</p>

			<EditForm Model="newPlayer" OnValidSubmit="RegisterPlayer" Context="editContext">
				<InputText @bind-Value="newPlayer.Username" placeholder="Username" class="input" />
				<InputText @bind-Value="newPlayer.PlayerQuote" placeholder="Favorite Quote" class="input" />
				<InputFile OnChange="HandlePhotoSelected" accept="image/*" />
				@if (!string.IsNullOrEmpty(_photoUrl))
				{
					<img src="@_photoUrl" alt="Selected Avatar" class="avatar-preview" />
				}
				<button type="submit">Register</button>
			</EditForm>
		</div>
	}
	else
	{
		<div class="profile-container">
			@if (isEditing)
			{
				<EditForm Model="player" OnValidSubmit="UpdatePlayerProfile" Context="editContext">
					<InputText @bind-Value="player.Username" placeholder="Username" class="input" />
					<InputText @bind-Value="player.PlayerQuote" placeholder="Favorite Quote" class="input" />
					<InputFile OnChange="HandlePhotoSelected" accept="image/*" />
					@if (!string.IsNullOrEmpty(player.AvatarUrl) || !string.IsNullOrEmpty(_photoUrl))
					{
						<img src="@(_photoUrl ?? player.AvatarUrl)" alt="Selected Avatar" class="avatar-preview" />
					}
					<button type="submit">Save Changes</button>
					<button type="button" @onclick="CancelEdit">Cancel</button>
				</EditForm>
			}
			else
			{

				<h2>@player.Username</h2>
				<p>Quote: @player.PlayerQuote</p>
				<img style="width:40px" src="@player.AvatarUrl" alt="player avatar" />
				<p>Total Score: @totalScore</p>
				<button @onclick="EnableEdit">Edit Profile</button>
			}
		</div>
		<div>@errorMessage</div>
	}
</AuthorizeView>




@code {
	[Parameter] public string name { get; set; }
	private string authid = null;
	private bool isAuthenticated = false;
	PlayerDto newPlayer = new PlayerDto();
	PlayerDto player = null;
	int totalScore = 0;
	AuthenticationState authState = null;
	private string _photoUrl;
	private bool isEditing = false;
	string errorMessage = "";

	protected override async Task OnInitializedAsync()
	{

		authState = await AuthStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity == null)
		{
			Navigation.NavigateTo("/login", true);
		}
		else
		{
			isAuthenticated = true;

			if (user.Identity?.IsAuthenticated == true)
			{
				var applicationUser = await UserManager.GetUserAsync(user);
				if (applicationUser != null)
				{
					authid = applicationUser.Id;
				}
			}

			try
			{
				player = await PlayerService.GetPlayerByAuthIdAsync(authid);
				totalScore = await PlayerService.GetPlayerTotalScore(authid);
			}
			catch (KeyNotFoundException)
			{
				player = null;
			}
		}
	}

	public async Task RegisterPlayer()
	{
		//await CreatePlayerAsync()
		newPlayer.Authid = authid;
		await PlayerService.CreatePlayerAsync(newPlayer);
		player = await PlayerService.GetPlayerByAuthIdAsync(authid);
		totalScore = await PlayerService.GetPlayerTotalScore(authid);
		// StateHasChanged();
	}

	//in the register page, do we want to call the CreateUser service method, or the register POST endpoint ?

	private async Task HandlePhotoSelected(InputFileChangeEventArgs files)
	{
		var sourceFile = files.File;
		if (sourceFile != null)
		{
			using var stream = new MemoryStream();
			await sourceFile.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(stream);

			_photoUrl = $"data:{sourceFile.ContentType};base64,{Convert.ToBase64String(stream.ToArray())}";

			if (isEditing)
			{
				player.AvatarUrl = _photoUrl; 
			}
			else
			{
				newPlayer.AvatarUrl = _photoUrl;
			}
		}
	}
	private async Task UpdatePlayerProfile()
	{
		await PlayerService.UpdatePlayerAsync(player);
		player = await PlayerService.GetPlayerByAuthIdAsync(authid);
		isEditing = false;
	}

	private void EnableEdit()
	{
		if(player.Isblocked == false)
		{
			isEditing = true;
			_photoUrl = player.AvatarUrl; 
		}
		else
		{
			errorMessage = "Blocked Users cannot edit profile";
		}
	}

	private void CancelEdit()
	{
		isEditing = false;
		_photoUrl = null;
	}
}

