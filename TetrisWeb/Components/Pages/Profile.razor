@page "/profile"
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject IPlayerService PlayerService
@inject AuthenticationStateProvider AuthStateProvider

@attribute [Authorize]

<PageTitle>Player Profile</PageTitle>

<AuthorizeView>

@* <h2>Profile</h2> *@


    <p>Loading profile...</p>
    @if(player is null)
    {
        <p>Player not found. Please register to play.</p>
        @* form for user to regiser as a player (give username, profile pic, quote, etc.) *@
    }
    else
    {
        @player.Username
        @player.PlayerQuote
        @player.AvatarUrl
        
    }
    @* Logic to display user information *@
}



@*try to access the player's info; if it doesn't exist, show them the interface to register to play*@

</AuthorizeView>



@code {
    private string authid;
    private bool isAuthenticated = false;
    PlayerDto player = null;
    int totalScore = 0;


    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity == null)
        {
            Navigation.NavigateTo("/login", true);
        }
        else
        {
            isAuthenticated = true;

            if (user.Identity?.IsAuthenticated == true)
            {
                var applicationUser = await UserManager.GetUserAsync(user);
                if (applicationUser != null)
                {
                    authid = applicationUser.Id;
                }
            }

            try
            {
                player = await PlayerService.GetPlayerAsync(authid);
                totalScore = await PlayerService.GetPlayerTotalScore(authid);
            }
            catch(KeyNotFoundException)
            {
                player = null;
            }
        }
    }



    //in the register page, do we want to call the CreateUser service method, or the register POST endpoint ?
}

