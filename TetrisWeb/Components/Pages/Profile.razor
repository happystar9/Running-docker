@page "/Profile"
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject IPlayerService PlayerService
@inject AuthenticationStateProvider AuthStateProvider

@attribute [Authorize]

<PageTitle>Player Profile</PageTitle>

<AuthorizeView>
    @if (player is null)
    {
        <div class="profile-container">
            <p>Player not found. Please register to play.</p>

            <EditForm Model="newPlayer" OnValidSubmit="RegisterPlayer" Context="editContext">
                <InputText @bind-Value="newPlayer.Username" placeholder="Username" class="input" />
                <InputText @bind-Value="newPlayer.PlayerQuote" placeholder="Favorite Quote" class="input" />
                <InputText @bind-Value="newPlayer.AvatarUrl" placeholder="Avatar URL" class="input" />
                <button type="submit">Register</button>
            </EditForm>
        </div>
    }
    else
    {
        @* include something here for a generic default profile picture if the user's url isn't valid *@
        <div class="profile-container">
            <img style="width:90px" src="@player.AvatarUrl" alt="player avatar" />
            <h2>@player.Username</h2>
            <p>Quote: @player.PlayerQuote</p>
            <p>Total Score: @totalScore</p>
        </div>
    }
</AuthorizeView>




@code {
    [Parameter] public string name { get; set; }
    private string authid = null;
    private bool isAuthenticated = false;
    PlayerDto newPlayer = new PlayerDto();
    PlayerDto player = null;
    int totalScore = 0;
    AuthenticationState authState = null;


    protected override async Task OnInitializedAsync()
    {

        authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity == null)
        {
            Navigation.NavigateTo("/login", true);
        }
        else
        {
            isAuthenticated = true;

            if (user.Identity?.IsAuthenticated == true)
            {
                var applicationUser = await UserManager.GetUserAsync(user);
                if (applicationUser != null)
                {
                    authid = applicationUser.Id;
                }
            }

            try
            {
                player = await PlayerService.GetPlayerByAuthIdAsync(authid);
                totalScore = await PlayerService.GetPlayerTotalScore(authid);
            }
            catch(KeyNotFoundException)
            {
                player = null;
            }
        }
    }

    public async Task RegisterPlayer()
    {
        //await CreatePlayerAsync()
        newPlayer.Authid = authid;
        await PlayerService.CreatePlayerAsync(newPlayer);
        player = await PlayerService.GetPlayerByAuthIdAsync(authid);
        // StateHasChanged();
    }
}

