@page "/manageUsers"
@using TetrisWeb.ApiServices;
@using Microsoft.AspNetCore.Identity;
@using TetrisWeb.AuthData;
@using TetrisWeb.GameData;
@using Microsoft.AspNetCore.Components.Forms
@using TetrisWeb.ApiServices
@inject IGameService gameService;
@inject IPlayerService PlayerService
@inject UserManager<ApplicationUser> UserManager;
@inject AuthenticationStateProvider AuthStateProvider;
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Admin")]


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
<button class="btn-info" @onclick="ShowUsers">List All Users</button>

@if (players != null && players.Any())
{
	<ul>
		@foreach (var user in players)
		{
			<li>
				<strong>@user.Username</strong>
				<button class="btn-link" @onclick="() => EditUser(user)">Edit</button>
			</li>
		}
	</ul>
}

@if (editingUser != null)
{
	<h4>Edit User: @editingUser.Username</h4>
	<EditForm Model="editingUser" OnValidSubmit="SaveUserChanges">
		<InputText @bind-Value="editingUser.Username" placeholder="Username" class="form-control" />
		<InputText @bind-Value="editingUser.PlayerQuote" placeholder="Player Quote" class="form-control" />
		<InputFile OnChange="HandlePhotoSelected" accept="image/*" />
		@if (!string.IsNullOrEmpty(editingUser.AvatarUrl) || !string.IsNullOrEmpty(_photoUrl))
		{
			<img src="@(_photoUrl ?? editingUser.AvatarUrl)" alt="Selected Avatar" class="avatar-preview" />
		}
		<div class="form-check">
			<InputCheckbox @bind-Value="editingUser.Isblocked" class="form-check-input" id="blockCheck" />
			<label class="form-check-label" for="blockCheck">Block User</label>
		</div>
		<button type="submit" class="btn-primary">Save</button>
		<button type="button" class="btn-secondary" @onclick="CancelEdit">Cancel</button>
	</EditForm>
}


@code {
	AuthenticationState authState;
	bool isAdmin;
	string authId;
	List<PlayerDto> players;
	PlayerDto editingUser;
	private string _photoUrl;

	protected override async void OnInitialized()
	{
		authState = await AuthStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity?.IsAuthenticated == true)
		{
			var applicationuser = await UserManager.GetUserAsync(user);
			if (applicationuser != null)
			{
				authId = applicationuser.Id;
			}

			isAdmin = user.IsInRole("Admin");
		}
		StateHasChanged();

	}

	public async Task ShowUsers()
	{
		players = await PlayerService.GetAllPlayersAsync();
		StateHasChanged();
	}

	private void EditUser(PlayerDto user)
	{
		editingUser = user;
	}

	private async Task SaveUserChanges()
	{
		await PlayerService.UpdatePlayerAsync(editingUser);
		editingUser = null;
		await ShowUsers();
	}

	private void CancelEdit()
	{
		editingUser = null;
	}

	private async Task HandlePhotoSelected(InputFileChangeEventArgs files)
	{
		var sourceFile = files.File;
		if (sourceFile != null)
		{
			using var stream = new MemoryStream();
			await sourceFile.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(stream);

			_photoUrl = $"data:{sourceFile.ContentType};base64,{Convert.ToBase64String(stream.ToArray())}";

			if (editingUser != null)
			{
				editingUser.AvatarUrl = _photoUrl;
			}
			else
			{
				editingUser.AvatarUrl = _photoUrl;
			}
		}
	}

	private void BlockUser()
	{
		if (editingUser == null)
			return;

		editingUser.Isblocked = true;
	}

	private void UnBlockUser()
	{
		if (editingUser == null)
			return;

		editingUser.Isblocked = false;
	}
}