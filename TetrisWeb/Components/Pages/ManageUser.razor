@page "/manageUsers"
@using TetrisWeb.ApiServices;
@using Microsoft.AspNetCore.Identity;
@using TetrisWeb.AuthData;
@using TetrisWeb.GameData;
@using Microsoft.AspNetCore.Components.Forms
@inject IGameService gameService;
@inject IPlayerService PlayerService
@inject UserManager<ApplicationUser> UserManager;
@inject AuthenticationStateProvider AuthStateProvider;
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Admin")]


<h2>Manage Users</h2>
<p>
    As an admin, this is where you can view all registered users and make adjustments to their profiles.
    To block/ban a user, click on "Ban" next to their name.
</p>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>

<div class="user-container">
 @* <button class="btn-info" @onclick="ShowUsers">List All Users</button> *@

@* @if (players != null && players.Any())
{
	<ul>
		@foreach (var user in players)
		{
			<li>
				<strong>@user.Username</strong>
				<button class="btn-link" @onclick="() => EditUser(user)">Edit</button>
			</li>
		}
	</ul>
}
 *@

    @if (players != null && players.Any())
    {
        <table class="user-table">
            <thead>
                <tr>
                    <th>Username</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in players)
                {
                    <tr>
                        <td>@user.Username</td>
                        <td>
                            <button class="btn-link" @onclick="() => EditUser(user)">Edit</button>
                            @if (user.Isblocked == true)
                            {
                                <button class="btn-link" @onclick="() => UnBlockUser(user)">Unban User</button>
                            }
                            else
                            {
                                <button class="btn-link" @onclick="() => BlockUser(user)">Ban User</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No users found. Please wait.</p>
    }
</div>

<div class="editing-container">

@if (editingUser != null)
{
    <h4>Edit User: @editingUser.Username</h4>
    <EditForm Model="editingUser" OnValidSubmit="SaveUserChanges">
        <InputText @bind-Value="editingUser.Username" placeholder="Username" class="form-control" />
        <InputText @bind-Value="editingUser.PlayerQuote" placeholder="Player Quote" class="form-control" />
            <br />

        <InputFile OnChange="HandlePhotoSelected" accept="image/*" />
        @if (!string.IsNullOrEmpty(editingUser.AvatarUrl) || !string.IsNullOrEmpty(_photoUrl))
        {
            <img id="profile-image" src="@(_photoUrl ?? editingUser.AvatarUrl)" alt="Selected Avatar" class="avatar-preview" />
        }
        <button type="submit" class="btn-primary">Save</button>
        <button type="button" class="btn-secondary" @onclick="CancelEdit">Cancel</button>
    </EditForm>
}
</div>


@code {
    AuthenticationState authState;
    bool isAdmin;
    string authId;
    List<PlayerDto> players;
    PlayerDto editingUser;
    private string _photoUrl;
    private bool isInitialized = false;


    protected override async Task OnInitializedAsync()
    {
        if (!isInitialized)
        {
            authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var applicationuser = await UserManager.GetUserAsync(user);
                if (applicationuser != null)
                {
                    authId = applicationuser.Id;
                }

                isAdmin = user.IsInRole("Admin");
            }

            isInitialized = true;
        }
        players = await PlayerService.GetAllPlayersAsync();

    }

    public async Task ShowUsers()
    {
        players = await PlayerService.GetAllPlayersAsync();
        StateHasChanged();
    }

    private void EditUser(PlayerDto user)
    {
        editingUser = user;
    }

    private async Task SaveUserChanges()
    {
        await PlayerService.UpdatePlayerAsync(editingUser);
        editingUser = null;
        // await ShowUsers();
        StateHasChanged();
    }

    private void CancelEdit()
    {
        editingUser = null;
    }

    private async Task HandlePhotoSelected(InputFileChangeEventArgs files)
    {
        var sourceFile = files.File;
        if (sourceFile != null)
        {
            using var stream = new MemoryStream();
            await sourceFile.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(stream);

            _photoUrl = $"data:{sourceFile.ContentType};base64,{Convert.ToBase64String(stream.ToArray())}";

            if (editingUser != null)
            {
                editingUser.AvatarUrl = _photoUrl;
            }
            else
            {
                editingUser.AvatarUrl = _photoUrl;
            }
        }
    }

    private async Task BlockUser(PlayerDto user)
    {
        if (user == null)
            return;

        user.Isblocked = true;
        await PlayerService.UpdatePlayerAsync(user);
        StateHasChanged();
    }

    private async Task UnBlockUser(PlayerDto user)
    {
        if (user == null)
            return;

        user.Isblocked = false;
        await PlayerService.UpdatePlayerAsync(user);
        StateHasChanged();
    }
}