@page "/games"
@inject GameSessionService gameSessionService;
@inject IScoreService scoreService;
@inject IGameService gameService;
@inject IPlayerService playerService;

@inject AuthenticationStateProvider AuthStateProvider;
@inject UserManager<ApplicationUser> UserManager;


<h2>Games</h2>
<p>
    Below are all of the current and previous games.
    To join a game, ensure you are logged in and registered as a player,
    then click "Join Game"" next to one of the live game IDs.
</p>
<p>
    To view the results for previous games, click on "View Results"
    next to the past game's ID.
</p>
@if (message != "")
{
    <p>@message <NavLink href="/Profile">here</NavLink>.</p>
}

<div class="main-game-container">

    <div class="live-games-container">

        <h3>Live Games</h3>

        @if (liveGames?.Any() == true)
        {
            <table class="games-table">
                <thead>
                    <tr>
                        <th class="id-column">ID</th>
                        <th class="action-column">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var game in liveGames)
                    {
                        <tr>
                            <td>@game.Id</td>
                            <td>
                                @if (playerDto is not null)
                                {
                                    <button @onclick="()=> JoinGameAsync(game.Id, playerDto.Id, gameLoop)">Join Game</button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        }
        else
        {
            <p>No live games available.</p>
        }

    </div>
    <br />
    <hr />
    <br />

    <div class="past-games-container">
        <h3>Past Games</h3>
        @if (pastGames?.Any() == true)
        {
            <table class="games-table">
                <thead>
                    <tr>
                        <th class="id-column">ID</th>
                        <th class="action-column">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var game in pastGames)
                    {
                        <tr>
                            <td>@game.Id</td>
                            <td>
                                <button @onclick="async () => await ShowLeaderboardAsync(game.Id)">View Results</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>


            @if (showModal)
            {
                <div class="modal">
                    <div class="modal-content">
                        <span class="close" @onclick="CloseModal">&times;</span>
                        <h4>Leaderboard for Selected Game</h4>
                        @if (selectedLeaderboard.Any() == true)
                        {
                            <table class="leaderboard-table">
                                <thead>
                                    <tr>
                                        <th>Rank</th>
                                        <th>Username</th>
                                        <th>Score</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in selectedLeaderboard)
                                    {
                                        <tr>
                                            <td>@(selectedLeaderboard.IndexOf(item) + 1)</td>
                                            <td>@item.Username</td>
                                            <td>@item.TotalScore</td>
                                        </tr>
                                    }

                                </tbody>
                            </table>
                        }
                        else
                        {
                            <div>
                                <p>No results for this game.</p>
                            </div>
                        }

                    </div>
                </div>
            }
        }
        else
        {
            <p>No past games available.</p>
        }
    </div>
</div>

@code {
    private bool showModal = false;
    GameLoop gameLoop;
    Game selectedGame;
    List<Game> liveGames;
    List<Game> pastGames;
    List<LeaderboardDto> selectedLeaderboard;
    AuthenticationState authState;
    PlayerDto playerDto;
    string message = "";
    bool hasPlayerAccount = false;


    string authId;
    int playerId;

    protected override async Task OnInitializedAsync()
    {

        authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var applicationuser = await UserManager.GetUserAsync(user);
            if (applicationuser is not null)
            {
                authId = applicationuser.Id;

            }

            try
            {
                playerDto = await playerService.GetPlayerByAuthIdAsync(authId);
                playerId = playerDto.Id;
            }
            catch
            {
                message = "You have not registered as a player yet. Before you can play, you must set up a player account ";
            }


        }
        await LoadGamesAsync();
    }

    private async Task ShowLeaderboardAsync(int gameId)
    {
        selectedLeaderboard = await scoreService.GetScoresForGameAsync(gameId);
        showModal = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        showModal = false;
        StateHasChanged();
    }

    private async Task LoadGamesAsync()
    {
        liveGames = await gameService.GetAllLiveGamesAsync();
        pastGames = await gameService.GetAllPastGamesAsync();
    }

    private async Task JoinGameAsync(int gameId, int playerId, GameLoop gameLoop)
    {
        playerService.SetCurrentGameId(authId, gameId);
        gameSessionService.CreateGameSession(playerId, gameId);
        gameLoop = await gameSessionService.GetGameSession(playerId, gameId);
        gameLoop.OnStateChange += StateHasChanged;
        await gameService.JoinGameAsync(gameId, playerId, gameLoop);
    }

}
